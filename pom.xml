<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.wellnr.examples</groupId>

	<artifactId>mvn-scala-aspectj</artifactId>

	<version>1.0-SNAPSHOT</version>

	<packaging>jar</packaging>

	<name>${project.artifactId}</name>

	<inceptionYear>2013</inceptionYear>

	<description>
		This example shows how AspectJ can be used with Scala, configured with Maven.
	</description>

	<properties>
		<encoding>UTF-8</encoding>

		<aspectj.version>1.7.3</aspectj.version>
		<junit.version>4.8.1</junit.version>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<scala.version>2.10.3</scala.version>
		<scala.m.version>2.10</scala.m.version>

		<mvn.compiler.version>3.0</mvn.compiler.version>
		<mvn.jar.version>2.4</mvn.jar.version>
		<mvn.scala.plugin>2.15.2</mvn.scala.plugin>
		<onejar.version>1.4.4</onejar.version>
	</properties>

	<repositories>
		<repository>
			<id>oss.sonatype.org</id>
			<name>OSS Sonatype Staging</name>
			<url>https://oss.sonatype.org/content/groups/staging</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectj.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${mvn.compiler.version}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
						<outxml>true</outxml>
						<verbose>false</verbose>
						<showWeaveInfo>false</showWeaveInfo>
					</configuration>
					<executions>
						<execution>
							<!-- Modifying output directory of default compile because non-weaved 
								classes must be stored in separate folder to not confuse ajc by reweaving 
								already woven classes (which leads to to ajc error message like "bad weaverState.Kind: 
								-115") -->
							<id>default-compile</id>
							<configuration>
								<compilerArguments>
									<d>${project.build.directory}/unwoven-classes</d>
								</compilerArguments>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.scala-tools</groupId>
					<artifactId>maven-scala-plugin</artifactId>
					<version>${mvn.scala.plugin}</version>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>
								<goal>testCompile</goal>
							</goals>
							<configuration>
								<args>
									<arg>-make:transitive</arg>
									<arg>-dependencyfile</arg>
									<arg>${project.build.directory}/.scala_dependencies</arg>
								</args>
								<outputDir>${project.build.directory}/unwoven-classes</outputDir>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${mvn.jar.version}</version>
					<configuration>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<mainClass>com.wellnr.examples.ExampleApp</mainClass>
							</manifest>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.jolira</groupId>
					<artifactId>onejar-maven-plugin</artifactId>
					<version>${onejar.version}</version>
					<executions>
						<execution>
							<configuration>
								<filename>${project.build.finalName}-exe.jar</filename>
							</configuration>
							<goals>
								<goal>one-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<executions>
						<execution>
							<id>createClassesDir</id>
							<phase>process-resources</phase>
							<configuration>
								<tasks>
									<mkdir dir="${project.build.directory}/unwoven-classes" />
									<mkdir dir="${project.build.directory}/classes" />
								</tasks>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>aspectj-maven-plugin</artifactId>
					<version>1.5</version>
					<configuration>
						<complianceLevel>${maven.compiler.target}</complianceLevel>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
						<weaveDirectories>
							<weaveDirectory>${project.build.directory}/unwoven-classes</weaveDirectory>
						</weaveDirectories>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.aspectj</groupId>
							<artifactId>aspectjrt</artifactId>
							<version>${aspectj.version}</version>
						</dependency>
						<dependency>
							<groupId>org.aspectj</groupId>
							<artifactId>aspectjtools</artifactId>
							<version>${aspectj.version}</version>
							<scope>compile</scope>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<phase>process-classes</phase>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>com.jolira</groupId>
				<artifactId>onejar-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
